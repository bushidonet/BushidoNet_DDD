// <auto-generated />
using System;
using AMochika.Infrastructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMochika.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241220082952_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AMochika.Core.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "juan.perez@gmail.com",
                            FirstName = "Juan",
                            LastName = "Pérez",
                            Phone = "555-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1985, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria.gomez@hotmail.com",
                            FirstName = "María",
                            LastName = "Gómez",
                            Phone = "555-987-6543"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1992, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carlos.rodriguez@yahoo.com",
                            FirstName = "Carlos",
                            LastName = "Rodríguez",
                            Phone = "555-234-5678"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1988, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.martinez@outlook.com",
                            FirstName = "Ana",
                            LastName = "Martínez",
                            Phone = "555-345-6789"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1995, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luis.hernandez@gmail.com",
                            FirstName = "Luis",
                            LastName = "Hernández",
                            Phone = "555-456-7890"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1987, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura.sanchez@gmail.com",
                            FirstName = "Laura",
                            LastName = "Sánchez",
                            Phone = "555-567-8901"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1993, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jose.torres@gmail.com",
                            FirstName = "José",
                            LastName = "Torres",
                            Phone = "555-678-9012"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1991, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sofia.diaz@yahoo.com",
                            FirstName = "Sofía",
                            LastName = "Díaz",
                            Phone = "555-789-0123"
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1989, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "miguel.ruiz@outlook.com",
                            FirstName = "Miguel",
                            LastName = "Ruiz",
                            Phone = "555-890-1234"
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(1994, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "camila.lopez@hotmail.com",
                            FirstName = "Camila",
                            LastName = "López",
                            Phone = "555-901-2345"
                        });
                });

            modelBuilder.Entity("AMochika.Core.Entities.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("AMochika.Core.Entities.PurchaseDetail", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecommendationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Appointment", b =>
                {
                    b.HasOne("AMochika.Core.Entities.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AMochika.Core.Entities.MedicalHistory", b =>
                {
                    b.HasOne("AMochika.Core.Entities.Client", "Client")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Purchase", b =>
                {
                    b.HasOne("AMochika.Core.Entities.Client", "Client")
                        .WithMany("Purchases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AMochika.Core.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("AMochika.Core.Entities.Product", "Product")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMochika.Core.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Recommendation", b =>
                {
                    b.HasOne("AMochika.Core.Entities.Client", "Client")
                        .WithMany("Recommendations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMochika.Core.Entities.Product", "Product")
                        .WithMany("Recommendations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalHistories");

                    b.Navigation("Purchases");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Product", b =>
                {
                    b.Navigation("PurchaseDetails");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("AMochika.Core.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
